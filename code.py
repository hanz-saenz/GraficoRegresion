# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mq7tMlA5nw9DWbfw4brEn1HoChu9PNmB
"""

### Graficos de regresion basados en seaborn

### se importan las bibliotecas representativas
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
## modilo matplotlib para personalizacion de grafico de burbujas
import matplotlib.patches as mpatches

##se carga un dataframe de la base de datos de seaborn
databframe = sns.load_dataset('iris')

##
databframe.head()

databframe.shape

databframe.describe().T

databframe.columns

sns.regplot(x='sepal_length', y='sepal_width', data=databframe, fit_reg=False)
plt.title('Grafico de dispersion regular dataset iris sepal (ANCHO LARGO)')
plt.show()

sns.regplot(x='sepal_length', y='sepal_width', data=databframe, fit_reg=True)
plt.title('Grafico de dispersion regular dataset iris sepal (ANCHO LARGO)')
plt.show()

sns.regplot(x='sepal_length', y='sepal_width', data=databframe, fit_reg=True, order=4)
plt.title('Grafico de dispersion regular dataset iris sepal (ANCHO LARGO)')
plt.show()

#color y forma
#para visualizar las diferentes categorias del dataset
sns.lmplot(x='sepal_length', y='sepal_width', data=databframe, fit_reg=False, hue='species')
plt.legend()
plt.show()

## Histograma Marginal
#### se quiere es hacer la representacion de dipersion de los datos
#### y observar mediante el histograma como es la distribucion de los datos
#### para sus correspondientes ejes(variebale en x, variable en y)

sns.jointplot(x='sepal_length', y='sepal_width', data=databframe, kind='scatter')

plt.show()

## Graficos de burbujas
#### se puede usar difernetes variables para codificar la informacion
#### la dispersion solo refleja en 2d sin embargo se puede hacer uso
#### de diferentes atributos para representar la informacion 3d

x = np.random.randint(100,300,15)

y = np.random.randint(50,90,15)

z = (x*y)/60

### se necesita discriminar el color en funcion del indice x[index], y[index], z[index]

## se quiere que los valores sean rojo 'r' y verde 'v'

for index, va in enumerate(z):
  if index < 10:
    color = 'r'
  else:
    color = 'g'

  plt.scatter(x[index], y[index], s = z[index]*5, c=color, alpha=0.5)

#Supondremos que se quiere obtener el grafico de burbujas por genero
parcheRojo = mpatches.Patch(color='red', label= 'Masculino')
parcheVerde = mpatches.Patch(color='green', label= 'Femenino')

plt.legend(handles=[parcheRojo, parcheVerde])
#supondremos que x sera una masa corporal en libras
plt.xlabel("Masa corporal en libras")
#supondremos que y sera altura en pulgadas
plt.ylabel("Altura en pulgadas")
#suponemos que el nombre de la grafica sera este
plt.title("Comedores de papas fritas vs altura y masa corporal")
plt.show()